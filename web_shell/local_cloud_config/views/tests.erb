<!--
  Xavier Demompion : xavier.demompion@mobile-devices.fr
  Mobile Devices 2013
-->

<div>

  <div id="info">
  </div>

  <div class="row-fluid">
    <p class="muted">This page is automatically refreshed every 5 seconds.<p>
  </div>

  <div class="row-fluid">
    <div class="btn-group pull-left" style="margin-right: 10px">
      <a id="agent-to-test" class="btn dropdown-toggle" data-toggle="dropdown" href="#">
        All agents
        <span class="caret"></span>
      </a>
      <ul class="dropdown-menu">
        <% @agents.each do |agent_name| %>
          <li><a id='<%= agent_name %>-element' tabindex="-1" href="#"><%= agent_name %></a></li>
        <% end %>
          <li class="divider"></li>
          <li><a id='all-agents-element' tabindex="-1" href="#">All agents</a></li>
      </ul>
    </div>

    <div>
      <button id="run-tests" class="btn btn-primary pull-left">Run tests</button>
    </div>

    <div id='current-state' class='pull-right well'>
    </div>
  </div>

  <div id="tests-results" class='row-fluid'>
  </div>

</div>



<script>

  $( document ).ready(function() {

    (function () { // pseudo-namespace

      function Agent(name,status) {
        this.name = name;
        this.status = status;
        this.is_updated = false;
      }

      // A global array of agents whose content is built when ERB renders the page
      // The array itself should not be modified, however the state of the agents inside it may be modified
      var agents = new Array();
      <% index = 0
        @agents.each do |agent_name| %>
           agents[<%= index %>] = new Agent("<%= agent_name %>", "not scheduled", false);
           <% index += 1 %>
        <% end %>

      // An array of the currently selected agents (via the dropdown menu)
      // Used by the callback on the "run tests" button
      var selected_agents = agents;

      var TEST_STATUS = {
        STOPPED: "stopped",
        STARTED: "started"
      };
      var current_test_status = TEST_STATUS.STOPPED;

      // ================= Set up the page =================
      // The following methods are exectued as soon the page is started

      // set up the drowpdown menu and the "run tests" button event listeners
      // other (dynamic) event listeners are defined below
      (function setup_event_listeners() {
        // dropdown menu agent selector
        for(var i = 0; i < agents.length; i++) {
          $("#" + agents[i].name + "-element").click(
            (function(agent) {
                 return function () {
                      selected_agents = new Array(agent);
                      set_up_tests_display(selected_agents);
                      $.cookie('mdi_sdk_selected_agent', agent.name, { expires: 1 });
                      set_dropdown_menu_item(agent.name);
                      start_live_results(selected_agents);
                    }
              })(agents[i])
          ); // ("#" + agents[i].name + "-element").click
        } // for(var i = 0; i < agents.length; i++)
        $("#all-agents-element").click( function() {
           selected_agents = agents;
           set_dropdown_menu_item('All agents');
           $.cookie('mdi_sdk_selected_agent', "all", { expires: 1 });
           set_up_tests_display(selected_agents);
           start_live_results(selected_agents);
         }) // $("#all-agents-element").click

        // run test button
        $("#run-tests").click( function() {
          if(current_test_status==TEST_STATUS.STOPPED) {
            flush_alerts();
            run_tests(selected_agents);
          }
          else {
            stop_tests();
          }
        }) // $("#run-tests").click

      })(); // function setup_event_listeners

      (function initialize() {
        // retrieve the agent(s) the user wants to display
        var selected_agent = $.cookie('mdi_sdk_selected_agent');
        if(selected_agent == null) {
          selected_agent = 'all';
        }
        var selected_array = null;
        if(selected_agent == 'all') {
          selected_array  = agents;
          set_dropdown_menu_item('All agents');
        } else {
          agents_name = new Array()
          var agent_index = -1;
          for(var i=0; i < agents.length; i++) {
            if (agents[i].name == selected_agent) {
              agent_index = i;
            }
          }
          if(agent_index == -1) { // unknown agent, default to 'all'
            selected_array = agents;
            set_dropdown_menu_item('All agents');
          } else {
            var agent = agents[agent_index];
            set_dropdown_menu_item(agent.name);
            selected_array = new Array(agent);
          }
        }
        selected_agents = selected_array;
        set_up_tests_display(selected_array);
        start_live_results(selected_array);
      })(); // function initialize



      // ================= Helpers ================= //

      function set_dropdown_menu_item(agent_name) {
        $("#agent-to-test").html(agent_name + "\n <span class='caret'></span>");
      }

      // alert type can be one of "info", "error", "warning", "success"
      function display_alert(alert_type, message) {
        if (!(alert_type == "info" || alert_type == "error" || alert_type == "success" || alert_type == "warning")) {
          var alert_type = "info";
        }
        var html = "<div class='alert fade in alert-" + alert_type + "'> <button type='button' class='close' data-dismiss='alert'>&times;</button> " + message + " </div>";
        if ($('#info').children("div").length < 3) {
          $('#info').prepend(html);
        } else {
          $('#info').prepend(html);
          $('#info > :last').remove();
        }
      }

      function flush_alerts() {
        $('#info').html("");
      }

      // type can be one of "info", "error", "warning", "success"
      // ignored for now
      function update_state_display(type, message) {
        if (!(type == "info" || type == "error" || type == "success" || type == "warning")) {
          var type = "info";
        }
        if (message == "") {
          $("#current-state").removeClass("well");
        } else {
          $("#current-state:not([class~='well'])").addClass("well");
        }
        $("#current-state").html(message);
      }

      function update_run_tests_button() {
        if(current_test_status==TEST_STATUS.STARTED) {
          $("#run-tests").html("Stop tests");
          $("#run-tests").removeClass("btn-primary");
          $("#run-tests").addClass("btn-danger");
        } else {
          $("#run-tests").html("Run tests");
          $("#run-tests").removeClass("btn-danger");
          $("#run-tests").addClass("btn-primary");
          update_state_display("info", "");
        }
      }

      // ================= Template generation ============== //

      function generate_template(agent) {
    tmpl = "<div id=" + agent.name + ">\n"
 + "       <h4>" + agent.name + "</h4>\n"
 + "         <div class='well well-small'>\n"
 + "           <div class='well well-small progress progress-striped active'>\n"
 + "               <div class='bar bar-success' style='width: 1%;'></div>\n"
 + "               <div class='bar bar-info' style='width: 0%;'></div>\n"
 + "               <div class='bar bar-danger' style='width: 1%;'></div>\n"
 + "             </div>\n"
 + "           <div class='row-fluid'>\n"
 + "             <div class='well well-small'>\n"
 + "               <div class='pull-left'>\n"
 + "                 <span class='status' style='margin-right: +20px;'> <strong></strong> </span>\n"
 + "                 <span class='summary'> Waiting for status update. </span>\n"
 + "               </div>\n"
 + "               <div class='pull-right'>\n"
 + "                 <button class='btn save disabled' disabled='disabled'>Save results</button>\n"
 + "               </div>\n"
 + "             </div>\n"
 + "           </div>\n"
 + "           <div class='row-fluid'>\n"
 + "             <div class='pull-left duration'>\n"
 + "             </div>\n"
 + "             <div class='pull-right start-time'>\n"
 + "             </div>\n"
 + "           </div>\n"
 + "        </div>\n"
 + "        <div id='accordion2' class='accordion'>\n"
 + "          <table class='table table-bordered' style='word-wrap: break-word; table-layout: fixed;'>\n"
 + "            <tbody class='results'>\n"
 + "            </tbody>\n"
 + "          </table>\n"
 + "        </div>\n"
 + "      </div>\n"
        return tmpl;
      }

      // agents is an Array of Agents
      function set_up_tests_display(agents_array) {
        $("#tests-results").html("");
        for (var i = 0; i < agents_array.length; i++) {
          // append html
          $("#tests-results").append(generate_template(agents_array[i]));
          // add save button callback
          $("div#" + agents_array[i].name + " .save").off("click");
          $("div#" + agents_array[i].name + " .save").click( (function(agent_name) {
            return function() {
              $.ajax({
                url: '/save_tests_results',
                type: "POST",
                data: {"agent": agent_name},
                success: function (data) {
                  display_alert("success", "Tests results saved to <em>" + data + "</em>");
                },
                error: function(xhr, status, errorThrown) {
                  display_alert("error", "<strong>Error when saving tests results</strong>. More information: " + status + " (" + errorThrown + "). </br>" + xhr.responseText);
                }
              }) // ajax
            } // inner function
          })(agents_array[i].name) // callback
          ) // click
        }

      }

      // ================= Main methods ================= //

      // agent_array is an array of agents
      function run_tests(agent_array) {
        // before doing anything lets check that the server is running
        var server_alive = false;
        $.ajax({
          url: '/gen_ruby_server_reboot',
          type: "GET",
          async: false,
          dataType: "json",
          success: function(data) {
            server_alive = true;
            if (data.crash || !data.running) {
              display_alert("warning", "The agents server must be running before running the tests.");
              server_alive = false;
            }
          },
          error: function(xhr, status, errorThrown) {
            display_alert("warning", "Impossible to contact the agents server (" + xhr.responseText + " - " + status + " - " + errorThrown + ")");
            server_alive = false;
          }
        });
        if (!(server_alive)) {
          return false;
        }

        // now let's check that we actually want to start a test for an agent
        if(agent_array.length == 0) {
          display_alert('info', "No agents are currently running. Mount agents on the <a href='http://0.0.0.0:5000'>SDK agents tab</a> and restart the agents server.");
          return false;
        }

        var agents_names = new Array();
        for(var i = 0; i < agent_array.length; i++) {
          agents_names[i] = agent_array[i].name
        }

        // query the server to start tests
        $.ajax({url: '/run_tests',
           data: {"agents": agents_names},
           type: "POST",
           async: false,
           success: function(data) {
            console.log("Starting tests; server responded: " + data); // TODO find why the server respond this strange hash
            update_state_display("info", "Tests started.");
            current_test_status = TEST_STATUS.STARTED;
            update_run_tests_button();
           },
           error: function(xhr, status, errorThrown) {
             console.error("Error when starting the tests: " + status + " (" + errorThrown + ") ---- " + xhr.responseText);
             display_alert("error", "<strong>An error occured when starting the tests.</strong> More information: " + status + " (" + errorThrown + "). </br>" + xhr.responseText);
           }
         }); // ajax
        start_live_results(agent_array);
      } // function run_tests

      function stop_tests() {
        $.ajax({url: '/stop_tests',
          type: "GET",
          async: false,
          success: function(data) {
            update_state_display("info", "Stopping tests.");
            current_test_status = TEST_STATUS.STOPPED;
            update_run_tests_button();
          }
        }); // ajax
      } // stop tests

      // ================= Live update of the page with AJAX ================= //

      // agents_to_test is an Array of agents
      // this method assumes that set_up_tests_display was previously called
      function start_live_results(agents_to_test) {
        update_status();

        // run updater for all agents
        for(var i = 0; i < agents_to_test.length; i++) {
          if(!agents_to_test[i].is_updated) {
            $('div#' + agents_to_test[i].name + " .results").html(""); // delete previous tests results
            $('div#' + agents_to_test[i].name + " .duration").html("");
            updater(agents_to_test[i], 0);
          }
        }

        // --- helper functions ---

        function update_status() {
          $.ajax({
            url: '/tests_status',
            dataType: "json",
            success: function (data) {
              current_test_status = TEST_STATUS.STOPPED;
              $.each(data, function(agent, status) {
                if(status == "started" || status == "scheduled") {
                  current_test_status = TEST_STATUS.STARTED;
                }
              })
              update_run_tests_button();
            },
            error: function(xhr, status, errorThrown) {
              console.error("An error occured when checking for test status update: " + status + " (" + errorThrown + ") with message " + xhr.responseText);
              display_alert("warning", "An error occured when checking for test status update: " + status + " (" + errorThrown + ") with message " + xhr.responseText);
            }
          }) // ajax

        } // update_status

        function update_progress_bars(current_agent, passed, pending, failed, example, current_status) {
          var parent = "div#" + current_agent.name + " ";
          $(parent + ".bar-success").width(Math.floor(passed * 100 / example )+'%');
          $(parent + ".bar-info").width(Math.floor(pending * 100 / example )+'%');
          $(parent + ".bar-danger").width(Math.floor(failed * 100 / example )+'%');
          if(current_status == "started" || current_status == "scheduled") {
            $(parent + ".progress:not([class~='active'])").addClass("active progress-striped"); // add active to the class of the progress bar group only if it is not already active
          }
          else if(current_status == "finished" || current_status == "not scheduled" || current_status == "no tests subfolder" || current_status == "interrupted") {
            $(parent + ".progress").removeClass("active progress-striped");
          }
        } // function update_progress_bars

        function update_status_display(current_agent, passed, pending, failed, example, current_status, start_time) {
          var parent = "div#" + current_agent.name + " ";
          if(current_status == "started") {
            $(parent + ".status").html("<strong>Running tests</strong>.");
            var tests_run = failed + pending + passed
            $(parent + ".summary").html("Current progress: " + tests_run + " run (" + failed + " failed, " + pending + " not implemented). Total number of tests to run: " + example);
            $(parent + '.start-time').html("Tests started at " + start_time);
            $(parent + '.save').removeClass("disabled")
            $(parent + '.save').removeAttr("disabled")
          }
          else if(current_status == "finished") {
            $(parent + ".status").html("<strong>Tests complete</strong>.");
            var tests_run = failed + pending + passed
            $(parent + ".summary").html(tests_run + " tests run (" + failed + " failed, " + pending + " not implemented).");
            $(parent + '.start-time').html("Tests started at " + start_time);
            $(parent + '.save').removeClass("disabled")
            $(parent + '.save').removeAttr("disabled")
          }
          else if(current_status == "not scheduled") {
            $(parent + ".status").html("No tests are currently scheduled for this agent.");
            $(parent + ".summary").html("");
            $(parent + '.start-time').html("");
          }
          else if(current_status == "scheduled") {
            $(parent + ".status").html("Waiting for tests to start.");
            $(parent + ".summary").html("");
            $(parent + '.start-time').html("");
          }
          else if(current_status == "no tests subfolder") {
            $(parent + ".status").html("No 'tests' subfolders found, skipping tests.");
            $(parent + ".summary").html("");
            $(parent + '.start-time').html("");
          } else if(current_status == "interrupted") {
            $(parent + ".status").html("<strong>Tests interrupted</strong>.");
            var tests_run = failed + pending + passed
            $(parent + ".summary").html(tests_run + " tests run (" + failed + " failed, " + pending + " not implemented) out of " + example + ".");
            $(parent + '.start-time').html("Tests started at " + start_time);
            $(parent + '.save').removeClass("disabled")
            $(parent + '.save').removeAttr("disabled")
          } else if(current_status == "aborted") {
            $(parent + ".status").html("Can not run tests.");
            $(parent + ".summary").html("");
            $(parent + '.start-time').html("");
          } else {
            console.error("Can not update status display because " + current_status + " is an unknow status.");
          }
        } // function update_status_display

        // this function regularly calls the "/update_test_status" URL for the given agent
        // it will do so on a regular basis until no more updates are needed
        // it will update the page according to the received data
        function updater(agent, max_index) {
          var next_request = 1000;
          $.ajax({
            url: '/update_test_status',
            data: {"index": max_index, "agent": agent.name},
            type: "GET",
            dataType: "json",
            success: function(data) {
              if(data.max_index != null) {
                max_index = data.max_index;
              }
              if(data.duration != null) {
                // update duration
                $("div#" + agent.name + " .duration").html("Duration: " +  data.duration + " seconds.");
              }
              $('div#' + agent.name + " .results").append(data.html);
              update_progress_bars(agent, data.passed_count, data.pending_count, data.failed_count, data.example_count, data.status);
              update_status_display(agent, data.passed_count, data.pending_count, data.failed_count, data.example_count, data.status, data.start_time);
              agent.status = data.status;
              if (next_request < 5000) {
                next_request = next_request + 1000;
              }
            },
            error: function(xhr, status, errorThrown) {
            console.error("Error when updating tests results: " + status + " (" + errorThrown + ") ---- " + xhr.responseText)
            display_alert("warning", "<strong>An unexpected error occured during the tests.</strong> More information: " + status + " (" + errorThrown + "). </br>" + xhr.responseText);
            next_request = 500;
            },
            complete: function() {
              agent.is_updated = false;
              console.log("Current status for agent " + agent.name + " is " + agent.status)
              if (agent.status == "finished") {
                update_state_display("success", "Tests for agent " + agent.name + " complete.");
                update_status();
                return 1;
              } else if (agent.status == "not scheduled") {
                update_status();
                return 1;
              } else if (agent.status == "no tests subfolder") {
                update_state_display("info", "No 'tests' subfolders found for agent " + agent.name + ".");
                update_status();
                return 1;
              }
              else if (agent.status == "interrupted") {
                display_alert("info", "Tests for agent " + agent.name + " were interrupted.");
                update_status();
                return 1;
              }
              else if (agent.status == "aborted") {
                display_alert("error", "Tests for agent " + agent.name + " were aborted because of a problem in the test file.");
                update_status();
                return 1;
              }
              agent.is_updated = true;
              console.log("Next request for agent " + agent.name + " is scheduled in " + next_request + "ms with index " + max_index);
              setTimeout(function() {updater(agent, max_index)}, next_request);
            } // complete
          }); // ajax
        }; // function updater
      } // function start_live_results
    })(); // namespace
  }); // document ready

  </script>

</div>