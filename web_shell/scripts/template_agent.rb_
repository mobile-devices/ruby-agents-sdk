#!/usr/bin/ruby -w

#########################################################
# Xavier Demompion : xavier.demompion@mobile-devices.fr
# Mobile Devices 2013
#########################################################

require 'yaml'
require_relative '../../cloud_agents/XX_PROJECT_NAME/initial'

# XX_PROJECT_NAME agent
class Agent_XX_PROJECT_NAME

  # Project
  @AGENT_NAME = 'XX_PROJECT_NAME'
  @CHANNEL = 'com.mdi.services.XX_PROJECT_NAME'

  def initialize() # constructor
    log_debug("Agent_XX_PROJECT_NAME root path is = \"#{root_path}\"")

    # Load dynamic channel
    @CHANNEL = config['Dynamic_channel_str']
    if @CHANNEL == nil
      @CHANNEL = 'com.mdi.services.XX_PROJECT_NAME'
    end
    log_debug("Agent_XX_PROJECT_NAME init with dynamic channel = \"#{@CHANNEL}\"")
  end

  ######### Messages from devices ######################################
  def handle_message(meta, payload, account)
    return unless payload['channel'] == @CHANNEL
    if payload['type'] != 'message'
      log_error("handle_message: wrong type #{payload['type']} (not 'message')")
      return
    end
    SDK_STATS.stats['agents']['XX_PROJECT_NAME']['received'][1] += 1
    CC_SDK.logger.info("Server: handle_message: pushing message to agent XX_PROJECT_NAME ..................")
    new_message_from_device(meta, payload, account)
  end

  def handle_presence(meta, payload, account)
    if payload['type'] != 'connect' && payload['type'] != 'reconnect' && payload['type'] != 'disconnect'
      log_error("handle_presence: wrong type '#{payload['type']}' (not 'message')")
      return
    end
    SDK_STATS.stats['agents']['XX_PROJECT_NAME']['received'][0] += 1
    CC_SDK.logger.info("Server: handle_presence: pushing presence '#{payload['type']}' to agent XX_PROJECT_NAME ..................")
    new_presence_from_device(meta, payload, account)
  end

  def handle_track(meta, payload, account)
    #todo: test type, log on errors
    SDK_STATS.stats['agents']['XX_PROJECT_NAME']['received'][2] += 1
    CC_SDK.logger.info("Server: handle_track: pushing track to agent XX_PROJECT_NAME ..................")
    new_track_from_device(meta, payload, account)
  end

  ########## Messages to devices #######################################
  def send_message_to_device(account, asset, content)
    #todo add try catch
    begin
      Message.new({
        asset:     asset,
        recipient: asset,
        sender:    '@@server@@',
        channel:   @CHANNEL,
        payload:   content.to_json
        }).push
    #note: for real wrapper : mock up account as bellow :
    #   account.messages.new({
    #     asset:     asset.imei,
    #     recipient: asset.imei,
    #     sender:    '@@server@@',
    #     channel:   @CHANNEL,
    #     payload:   content.to_json
    #     }, as: :agent).push
      SDK_STATS.stats['agents']['XX_PROJECT_NAME']['push_sent_to_device'] += 1
    rescue Exception => e
      CC_SDK.logger.error("Error on send_message_to_device")
      print_ruby_exeption(e)
      SDK_STATS.stats['agents']['XX_PROJECT_NAME']['err_on_push'] += 1
    end
  end

  def reply_message_to_device(message, account, content)
    #idem, we build a Message then send it to rqueue
    begin
      #note: real wrapper will be : m.push('account' => account.name)
      m = message.reply("200#{content}")
      m.push('account' => account)
      SDK_STATS.stats['agents']['XX_PROJECT_NAME']['reply_sent_to_device'] += 1
    rescue Exception => e
      CC_SDK.logger.error("Error on reply_message_to_device")
      print_ruby_exeption(e)
      SDK_STATS.stats['agents']['XX_PROJECT_NAME']['err_on_reply'] += 1
    end
  end

  ############### Logger ###############################################
  def log_debug(str_msg)
    CC_SDK.logger.debug("Agent XX_PROJECT_NAME: #{str_msg}")
  end

  def log_info(str_msg)
    CC_SDK.logger.info("Agent XX_PROJECT_NAME: #{str_msg}")
  end

  def log_warn(str_msg)
    CC_SDK.logger.warn("Agent XX_PROJECT_NAME: #{str_msg}")
  end

  def log_error(str_msg)
    CC_SDK.logger.error("Agent XX_PROJECT_NAME: #{str_msg}")
  end

  ############### Redis ################################################
  def redis()
    @redis ||= Redis::Namespace.new('CCS:XX_PROJECT_NAME', :redis => CC_SDK.redis)
  end

  ############### Config ###############################################
  #note: real wrapper wille have a .yml for each agent in a same folder
  def config()
    @config ||= begin
      if File.exist?("#{@root_dir}/config/XX_PROJECT_NAME.yml")
        @config = YAML::load(File.open("#{@root_dir}/config/XX_PROJECT_NAME.yml"))['development']
      elsif File.exist?("#{@root_dir}/config/XX_PROJECT_NAME.yml.example")
        @config = YAML::load(File.open("#{@root_dir}/config/XX_PROJECT_NAME.yml.example"))['development']
      else
        log_warn("NO CONFIG FILE FOUND")
        @config = Hash.new
      end
    rescue Exception => e
      log_error("ERROR while loading configuration")
      print_ruby_exeption(e)
    end
  end

  ############### Path ################################################

  def root_path()
    'XX_PROJECT_ROOT_PATH'
  end

  ######################################################################

  include Initial_agent_XX_PROJECT_NAME

end
