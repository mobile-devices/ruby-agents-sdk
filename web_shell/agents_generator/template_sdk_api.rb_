#!/usr/bin/env ruby
#########################################################
# Xavier Demompion : xavier.demompion@mobile-devices.fr
# Mobile Devices 2013
#########################################################


# @api public
# An agent-specific module whose role is to be a wrapper around the SDK module (generated code).
# Including this module in your classes will grant you access to the SDK API already configured
# with your agent.
module Sdk_api_XX_DOWNCASED_CLEAN_PROJECT_NAME

  # Protogen
  if File.exist?("#{RH.generated_path}/protogen_XX_PROJECT_NAME/protogen_apis.rb")
    require_relative '../protogen_XX_PROJECT_NAME/protogen_apis'
  end


  # @api public
  # This module gives you access to the SDK API.
  module SDK

    # This module gives you objects that are already configured with your agent needs.
    # @api public
    module API

      # Prints to the logs a nicely formatted Ruby exception
      # @param [Class<Exception>] e an exception
      def self.print_ruby_exception(e)
        stack=""
        e.backtrace.take(20).each { |trace|
          stack+="  >> #{trace}\n"
        }
        self.log.error("  RUBY EXCEPTION >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n >> #{e.inspect}\n\n#{stack}\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
      end

      # Use this object to send messages to your devices.
      # @return [DeviceGate] a DeviceGate object configured for your agent.
      def self.device_gate
        @@deviceGate ||= begin
          DeviceGate.new(self.get_channels[0])
        end
      end

      # Use this object to send messages to the cloud.
      # @return [CloudGate] a CloudGate object configured for your agent.
      def self.cloud_gate
        @@cloudGate ||= begin
          CloudGate.new(self.get_channels[0])
        end
      end


      # @return [CloudConnectServices::Log] a (singleton) instance of a logger configured for your agent.
      # @see file:guides/guidelines.md#Logs the logs guidelines
      def self.log
        @@agent_logger ||= begin
          CCS::Log.new('Agent XX_PROJECT_NAME: ')
        end
      end

      ############### Redis ################################################

      # Returns a (singleton) redis instance configured for your agent.
      # You don't need to namespace your keys, this will be done automatically.
      # The returned redis object gives you access to (nearly) all the redis API as documented [on the official Redis website](http://redis.io/commands).
      # Use it as a fast cache.
      # @note Your agent should not use some Redis commands (such as `shutdown`). The SDK will raise an exception if you try to do so,
      #   and an agent using these commands will not be accepted by Mobile Devices.
      # @return [Redis] a redis instance configured for your agent.
      def self.redis
        @@redis ||= Redis::Namespace.new('CCS:XX_PROJECT_NAME', :redis => CC.redis)
      end

      # @api private
      # @param [String] id an ID (different IDs mean different namespaces)
      # @return [Redis] a namespaced Redis instance
      def self.redis_internal(id = "")
        @@redis_internal ||= {}
        @@redis_internal[id] ||= Redis::Namespace.new('CCSI:XX_PROJECT_NAME_#{id}', :redis => CC.redis)
      end

      ############### Config ###############################################
      #note: real wrapper will have a .yml for each agent in a same folder

      # Returns the configuration of your agent stored in the file config/my-agent-name.yml.
      #
      # The configuration file must follow the YAML format.
      # You can add in this file values that are specific to your agent, in addition to the
      # channel and suscribing configuration, and access it with the hash returned by this method.
      #
      # Writing in the returned hash will not write in the configuration file.
      # @example Retrieve your agent channels
      #   def new_presence_from_device(presence)
      #     # on each presence received, we read the config value of the param 'dynamic_channel_str'
      #     puts "dynamic_channel_str value = #{config['dynamic_channel_str']}"
      #   end
      # @return [Hash] the configuration of your agent.
      def self.config
        @@config ||= begin
          if File.exist?("#{root_path}/config/XX_PROJECT_NAME.yml")
            if $ENV_TARGET == 'ragent'
              @@config = YAML::load(File.open("#{root_path}/config/XX_PROJECT_NAME.yml"))['production']
            else
            @@config = YAML::load(File.open("#{root_path}/config/XX_PROJECT_NAME.yml"))['development']
            end
          else
            log.error("NO CONFIG FILE FOUND in #{root_path}/config")
            full_path = File.expand_path("#{root_path}/config")
            log.info("IE  #{full_path}")
            raise "No config file found for XX_PROJECT_NAME"
          end
        rescue Exception => e
          log.error("ERROR while loading configuration")
          CCS.print_ruby_exception(e)
        end
      end

      # Returns the channels your agent is listening to.
      # Your agents send messages on the first configured chanel.
      # @return [Array<String>] the channels your agent is listening to.
      def self.get_channels
        @@CHANNEL = SDK.API.config['Dynamic_channel_str']
        @@CHANNEL = SDK.API.config['dynamic_channel_str'] if @@CHANNEL == nil

        if @@CHANNEL.is_a? String
          @@CHANNEL = ["#{@@CHANNEL}"]
        end

        if (@@CHANNEL == nil) || (@@CHANNEL.length == 0)
          @@CHANNEL = ['com.mdi.services.XX_PROJECT_NAME']
        end

        return @@CHANNEL

      end

      ############### Path ################################################

      # Returns the path to the root directory of your agent. You can write files in this folder.
      # @return [String] the path to the root directory of your agent.
      def self.root_path
        if $ENV_TARGET == 'ragent'
          dir_path = File.expand_path('..',"#{__FILE__}")
          "#{dir_path}/../../../../../builder/agents_git_sources/XX_PROJECT_NAME"
        else
        'XX_PROJECT_ROOT_PATH'
        end
      end
    end

    # @api private
    module ProtogenHelper
      include Protogen_XX_DOWNCASED_CLEAN_PROJECT_NAME if defined? Protogen_XX_DOWNCASED_CLEAN_PROJECT_NAME

      # @api private
      # Encode a given message with Protogen. Protogen will encode the content of the message and separate it into
      # smaller messages if needed.
      # @param [CloudConnectServices::Message] message message to encode (will not be modified)
      # @return [Array<CloudConnectServices::Message>] an array of Protogen-compliant messages ready to be pushed.
      # @raise Protogen::UnknownMessageType
      # @note If the global $allow_non_protogen is set to false and you call this methd with a non-Protogen message,
      #    this method will return a 1-element array with the given non-Protogen message without raising an exception.
      def protogen_encode(message)
        msg = message.clone
        if defined? ProtogenAPIs
          begin
            encoded = ProtogenAPIs.encode(msg)

            if encoded.is_a? String
              msg.content = encoded
              CC.logger.info("Protogen content is simple string")
              return [msg]
            elsif encoded.is_a? Array
              CC.logger.info("Protogen content is an array of size #{encoded.size}")
              fragments = encoded.map do |content|
                frg = msg.clone
                frg.id = CC.indigen_next_id
                frg.content = content
                frg
              end
              # the last fragment id must be the original message id
              # for proper response detection
              fragments.last.id = msg.id
              return fragments
            else
              raise "message push protogen unknown encoded type : #{encoded.type}"
            end

          rescue Protogen::UnknownMessageType => e
            if $allow_non_protogen
              CC.logger.warn("CloudConnectServices:Messages.push: unknown protogen message type because #{e.inspect}")
              return [msg]
            else
              raise e
            end
          end
        else
          if $allow_non_protogen
            CC.logger.warn('CloudConnectServices:Messages.push: ProtogenAPIs not defined')
            return [msg]
          else
            raise "No Protogen defined"
          end
        end
      end
    end

    # @api public
    # This class handles all outgoing communication with the devices.
    # @note You don't have to instantiate this class yourself.
    #       Use the {Sdk_api_XX_DOWNCASED_CLEAN_PROJECT_NAME::SDK::API.device_gate SDK.API.device_gate} object which is already configured for your agent.
    class DeviceGate

      include ProtogenHelper

      # @api private
      # @param channel [String] the messages passing through this gate will be sent on this channel
      def initialize(channel)
        @CHANNEL = channel
      end

      # Push a message to the device.
      # @param asset [Fixnum] the asset the message will be sent to
      # @param account [String] account name to use
      # @param content [Object] content of the message
      def push(asset, account, content)
        begin
          PUNK.start('push','pushing msg ...')

          msg = CCS::Message.new({
            'meta' => {},
            'payload' => {
              'type' => 'message',
              'sender' => '@@server@@',
              'recipient' => asset,
              'channel' =>  @CHANNEL,
              'payload' => content,
              'asset' => asset,
              'account' => account
            }
          })
          protogen_encode(msg).each {|message| message.push}
          # success !
          PUNK.end('push','ok','out',"SERVER -> MSG[#{crop_ref(msg.id,4)}]")


          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['push_sent_to_device'] += 1
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['total_sent'] += 1
        rescue Exception => e
          CC.logger.error("Error on push")
          CCS.print_ruby_exception(e)
          PUNK.end('push','ko','out',"SERVER -> MSG")
          # stats:
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['err_on_push'] += 1
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['total_error'] += 1
        end
      end

      # Reply a message to the device.
      # @param msg [CloudConnectServices::Message] message to reply to
      # @param content [Object] content of the message
      # @param cookies [String] optional cookies, see the {file:guide/protogen.md Protogen guide}
      def reply(msg, content, cookies = nil)
        begin
          PUNK.start('reply','replying msg ...')
          response = msg.clone
          response.parent_id = msg.id
          response.id = CC.indigen_next_id
          response.content = content
          response.meta['protogen_cookies'] = cookies
          response.sender = '@@server@@'
          response.recipient = msg.asset
          protogen_encode(response).each {|message| message.push}
          # success !
          PUNK.end('reply','ok','out',"SERVER -> MSG[#{crop_ref(response.id,4)}] [reply of #{crop_ref(msg.id,4)}]")
          # stats:
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['reply_sent_to_device'] += 1
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['total_sent'] += 1
        rescue Exception => e
          CC.logger.error("Error on reply")
          CCS.print_ruby_exception(e)
          PUNK.end('reply','ko','out',"SERVER -> MSG (reply)")
          # stats:
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['err_on_reply'] += 1
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['total_error'] += 1
        end
      end

    end

    # @api public
    # This class handles all cloud to itself communication
    # @note You don't have to instantiate this class yourself.
    #    Use the {Sdk_api_XX_DOWNCASED_CLEAN_PROJECT_NAME::SDK::API.cloudGate SDK.API.cloudGate} object which is already configured for your agent.
    class CloudGate

      include ProtogenHelper

      # @api private
      # @param channel [String] the messages passing through this gate will be sent on this channel
      # @api private
      def initialize(channel)
        @CHANNEL = channel
      end

      # Inject a message in the server queue on a specific channel (ie push a message to the server)
      # @param [CloudConnectServices::Message] msg the message to inject
      # @param [String] channel channel the message will be posted to
      # @note Be wary of "infinite message loops" with this method.
      def inject_message(msg, channel)
        begin
          PUNK.start('injectmsg','inject message in cloud ...')

          out_id = 00000

          protogen_encode(msg).each do |message|

            out_id = CC.indigen_next_id

            inject_hash = {
              "meta" => {
                "account" =>     message.account,
                "cookies" =>     message.cookies
                },
              "payload" => {
                "id" =>          out_id,     # Indigen integer
                "asset" =>       "ragent",
                "sender" =>      @CHANNEL,               # Sender identifier (can be the same as the asset)
                "recipient" =>   "@@server@@",               # Recipient identifier (can be the same as the asset)
                "type" =>        "message",
                "recorded_at" => Time.now.to_i,               # timestamp integer in seconds
                "received_at" => Time.now.to_i,               # timestamp integer in seconds
                "channel" =>     channel,
                "payload" =>     message.content,
                "parent_id" =>   nil,                    # nil | message_identifier
                "timeout" =>     0                       # -1 | 0 | timeout integer. 0 -> instant
              }
            }

            inject_hash['meta'].delete_if { |k, v| v.nil? }
            inject_hash['payload'].delete_if { |k, v| v.nil? }

            # todo: put some limitation
            CC.push(inject_hash,'messages')
          end

          # success !
          PUNK.end('injectmsg','ok','out',"SERVER <- SERVER MSG[#{crop_ref(out_id,4)}]")

          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['inject_to_cloud'] += 1
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['total_sent'] += 1
        rescue Exception => e
          CC.logger.error("Error on inject message")
          CCS.print_ruby_exception(e)
          PUNK.end('injectmsg','ko','out',"SERVER <- SERVER MSG")
          # stats:
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['err_on_inject'] += 1
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['total_error'] += 1
        end
      end

      # Inject a track in the server queue (ie push a message to the server)
      # @param [CloudConnectServices::Track] track the track to send
      def inject_track(track)
        begin
          PUNK.start('injecttrack','inject in cloud ...')

          inject_hash = {
            "meta" => {
              "account" => track.account
              },
            "payload" => {
              "id" =>           CC.indigen_next_id,
              "sender" =>       @CHANNEL,               # Sender identifier, special for tracks injection
              "asset" =>        "ragent",
              'recorded_at' =>  Time.now.to_i,
              'received_at' =>  Time.now.to_i,
              'latitude' =>     track.latitude,
              'longitude' =>    track.longitude
            }
          }

          #add field of new data (and convert it) (todo: duplicate code here ... clean it)
          track.new_data.each do |field|
            field_code = CCSI.track_mapping.int_value_of(field['name'])
            if field_code == nil
              CC.logger.error("Track to_hash field '#{k}' not found !")
              CC.logger.error("Available are : #{CCSI.track_mapping.fetch_map[track.account]}")
              raise "Track to_hash field #{k} not found !"
            end

            binary_value = TrackFieldValueConverter.convert_to_binary(field['val'], field['type'], field['size'])

            CC.logger.debug("inject_track: Adding field '#{field['name']}' (int=#{field_code}) value='#{field['val']}' (binary=#{binary_value})")
            inject_hash['payload'][field_code] = binary_value

          end

          inject_hash['meta'].delete_if { |k, v| v.nil? }
          inject_hash['payload'].delete_if { |k, v| v.nil? }

          # todo: put some limitation
          CC.push(inject_hash,'tracks')

          # success !
          PUNK.end('injecttrack','ok','out',"SERVER <- SERVER Track")

          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['inject_to_cloud'] += 1
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['total_sent'] += 1
        rescue Exception => e
          CC.logger.error("Error on inject track")
          CCS.print_ruby_exception(e)
          PUNK.end('injecttrack','ko','out',"SERVER <- SERVER MSG")
          # stats:
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['err_on_inject'] += 1
          SDK_STATS.stats['agents']['XX_PROJECT_NAME']['total_error'] += 1
        end
      end
    end

    # Add CCS to the SDK module so that all of the SDK tools are in the SDK namespace.
    # CCS is not moved to the SDK namespace for backwards-compatibility reasons.
    # @return [Module] the {CloudConnectServices CCS} module
    def self.CCS
      CCS
    end

    # This method enables us to write SDK.API (and not SDK::API) for symmetry with SDK.CCS
    # @return [Module] the {Sdk_api_XX_DOWNCASED_CLEAN_PROJECT_NAME::SDK::API SDK::API} module
    def self.API
      API
    end

  end # module SDK
end # module Sdk_api_XX_DOWNCASED_CLEAN_PROJECT_NAME