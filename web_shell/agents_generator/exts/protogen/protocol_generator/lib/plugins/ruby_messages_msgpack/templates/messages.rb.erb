### Do not edit
require 'json'

# This module namespaces all classes and modules used by protogen.
module Protogen

# This module contains all the protogen defined messages
# @protogen_version <%= ::ProtocolGenerator.version %>
# @protocol_version <%= Env['protocol_version'] %>
module Messages

  # Hardcoded protocol version
  # @api private
  PROTOCOL_VERSION = <%= Env['protocol_version'] %>

  # Hardcoded protogen version
  # @api private
  PG_VERSION = "<%= ::ProtocolGenerator.version %>"

<% Env['declared_types'].each_with_index do |type, index| %>
  # Internal value describing a <%= type %>.
  # @api private
  # @see <%= type %>
  ID_<%= type.upcase %> = <%= index %> <% end %>
<% Env['declared_types'].each do |type| %>

  # <%= Env['messages'][type]['_description'] || "Protogen message object"%>
  class <%= type %>

    <% Env['fields'][type].each do |field|
    field_desc = Env['messages'][type][field]
    is_array = field_desc['array']
    doctype = MSGPACK2RUBY[field_desc['type']] || field_desc['type']
    doctype = "Array<" + doctype + ">" if is_array %>
    # @!attribute [rw] <%= field %>
    #  @return [<%= doctype %>] <%= field_desc['docstring'] %><% end %>

    attr_accessor <%= Env['fields'][type].map{|f| ":#{f}"}.join(',') %>

    def initialize<% Env['fields'][type].each do |field| %>
      @<%= field %> = <%= ( Env['messages'][type][field]['array'] ? '[]' : 'nil' ) %><% end %>
    end

    # @api private
    def to_hash
      # TODO : Check the types <%
      Env['fields'][type].each do |field|
        if Env['messages'][type][field]['modifier'] == 'required'
      %>
      raise "Missing field : <%= field %>" if @<%= field %> == nil <%
        end
      end %>

      out_hash = {}<% Env['fields'][type].each do |field| %>
      out_hash['<%= field %>'] = <%=
      case Env['messages'][type][field]['type']
      when *BASIC_TYPES,'msgpack'
        "@#{field}"
      when *Env['declared_types']
        if Env['messages'][type][field]['array']
          "@#{field}.map{|item| item.to_hash} unless @#{field}.nil?"
        else
          "@#{field}.to_hash unless @#{field}.nil?"
        end
      else
        raise "Unknown type of field: #{Env['messages'][type][field]['type']}"
      end
      %><% end %>
      out_hash
    end

    # @api private
    def self.from_hash in_hash
      # TODO : Check the types
      msg = Messages::<%= type %>.new
      <% Env['fields'][type].each do |field| %>
      msg.<%= field %> = <%=
      case Env['messages'][type][field]['type']
      when *BASIC_TYPES,'msgpack'
        "in_hash['#{field}']"
      when *Env['declared_types']
        if Env['messages'][type][field]['array']
          "in_hash['#{field}'].map{|item| Messages::#{Env['messages'][type][field]['type']}.from_hash(item)} unless in_hash['#{field}'].nil?"
        else
          "Messages::#{Env['messages'][type][field]['type']}.from_hash(in_hash['#{field}']) unless in_hash['#{field}'].nil?"
        end
      else
        raise "Unknown type of field: #{Env['messages'][type][field]['type']}"
      end
      %><% end %>
      msg
    end
  end

<% end %>
end

<% if Env['use_cookies'] %>
module Cookies

  <% Env['cookie_names'].each do |cookie_name| %>

  class <%= cookie_name %>

    attr_accessor <%= Env['fields'][cookie_name].map{|f| ":#{f}"}.join(',') %>

    def self.validity_time
      <%= Env['cookies'][cookie_name]['_validity_time'] || '3600' %>
    end

    def initialize(<%= Env['fields'][cookie_name].join(',') %>)<% Env['fields'][cookie_name].each do |field| %>
      @<%= field %> = <%=
      case Env['cookies'][cookie_name][field]['type']
      when *BASIC_TYPES
        "#{field}"
      when *Env['declared_types']
        "Messages::#{Env['cookies'][cookie_name][field]['type']}.from_hash(#{field})"
      else
        raise "Unknown type of field: #{Env['cookies'][cookie_name][field]['type']}"
      end
      %><% end %>
    end

    def to_hash
      # TODO : Check the types
      out_hash = {}<% Env['fields'][cookie_name].each do |field| %>
      out_hash['<%= field %>'] = <%=
      case Env['cookies'][cookie_name][field]['type']
      when *BASIC_TYPES
        "@#{field}"
      when *Env['declared_types']
        "@#{field}.to_hash"
      else
        raise "Unknown type of field: #{Env['cookies'][cookie_name][field]['type']}"
      end
      %><% end %>
      out_hash
    end

    def self.from_hash in_hash
      # TODO : Check the types
      Cookies::<%= cookie_name %>.new(<%= Env['fields'][cookie_name].map{|field| "in_hash['#{field}']"}.join(',')%>)
    end
  end
  <% end %>
end
<% end %>
end
