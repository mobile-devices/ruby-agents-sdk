<!--
  Xavier Demompion : xavier.demompion@mobile-devices.fr
  Mobile Devices 2013
-->

<div>

  <div id="error_info">
  </div>

  <div id="save-info">
  </div>

  <div class="row-fluid">
    <span class="span8 pull-left"> <h3> Tests </h3> </span>
    <span class="span4 pull-right pull-down"> <span id = "start-time"> </span> </span>
  </div>

  <div class="row-fluid">
    <p class="muted">This page is automatically refreshed every 5 seconds.<p>
  </div>

   <% @agents.each do |agent| %>
     <div id="<%= agent %>" class ='row-fluid'>

      <h4><%= agent %></h4>

      <div class="well well-small">
        <div class="well well-small progress progress-striped active">
          <div class="bar bar-success" style="width: 1%;"></div>
          <div class="bar bar-info" style="width: 0%;"></div>
          <div class="bar bar-danger" style="width: 1%;"></div>
        </div>
        <div class="well well-small">
          <div class="pull-left">
            <span class="status" style="margin-right: +20px;"> <strong>Running tests</strong> </span>
            <span class="summary"> Waiting for test suite to start... </span>
          </div>
          <div class="pull-right" align="center">
              <button class="btn save disabled" disabled="disabled">Save results</button>
          </div>
        </div>
      </div>

      <div id="accordion2" class="accordion">
        <table class="table table-bordered" style="word-wrap: break-word; table-layout: fixed;">
          <tbody class='results'>

          </tbody>
        </table>
      </div>

    </div>
  <% end %>

</div>



  <script>

  $( document ).ready(function() {

      !function ($) { //ensure $ always references jQuery
      $(function () { //when dom has finished loading
          //make top text appear aligned to bottom: http://stackoverflow.com/questions/13841387/how-do-i-bottom-align-grid-elements-in-bootstrap-fluid-layout
          function fixHeader() {
              //for each element that is classed as 'pull-down'
              //reset margin-top for all pull down items
              $('.pull-down').each(function () {
                $(this).css('margin-top', 0);
              });

              //set its margin-top to the difference between its own height and the height of its parent
              $('.pull-down').each(function () {
                if ($(window).innerWidth() >= 768) {
                  $(this).css('margin-top', $(this).parent().height() - $(this).height());
                }
              });
            }

            $(window).resize(function () {
              fixHeader();
            });

            fixHeader();
          });
    }(window.jQuery);

    var max_index = 0;

    var agents = new Array();
    <% index = 0
      @agents.each do |agent| %>
         agents[<%= index %>] = "<%= agent %>";
         <% index += 1 %>
      <% end %>

    var current_agent_index = 0;
    var next_request = 500;


    (function save_button_setup() {
      for (var i = 0; i < agents.length; i++) {
        var current_agent = agents[i];
        parent = "div#" + current_agent + " ";
        $(parent + ".save").click( (function(agent) {
            return function() {
              $.ajax({url: '/save_tests_results',
              data: {"agent": agent},
              type: "POST",
              success: function(data) {
                $('#save-info').html("<div class='alert alert-success'>Tests results saved to " + data + "</div>")
              },
              error: function(xhr, status, errorThrown) {
               $('#save-info').html("<div class='alert alert-error'> <strong>Impossible to save results for agent " + agent + " .</strong> More information: " + xhr.responseText + "</div>");
              }
              })
            }
          })(current_agent)
        )
      }
    })();

    function update_progress_bars(passed, pending, failed, example, current_status) {
      var current_agent = agents[current_agent_index];
      parent = "div#" + current_agent + " ";
      $(parent + ".bar-success").width(Math.floor(passed * 100 / example )+'%');
      $(parent + ".bar-info").width(Math.floor(pending * 100 / example )+'%');
      $(parent + ".bar-danger").width(Math.floor(failed * 100 / example )+'%');
      if(current_status == "started" || current_status == "scheduled") {
        $(parent + ".progress:not([class~='active'])").addClass("active progress-striped"); // add active to the class of the progress bar group only if it is not already active
      }
      else if(current_status == "finished" || current_status == "not scheduled" || current_status == "no tests subfolder") {
        $(parent + ".progress").removeClass("active progress-striped");
      }
    }

    function update_status_display(passed, pending, failed, example, current_status, start_time) {
      current_agent = agents[current_agent_index];
      parent = "div#" + current_agent + " ";
      if(current_status == "started") {
        $(parent + ".status").html("<strong>Running tests</strong>.");
        tests_run = failed + pending + passed
        $(parent + ".summary").html("Current progress: " + tests_run + " run (" + failed + " failed, " + pending + " pending). Total number of tests to run: " + example);
        $('#start-time').html("Last tests started at " + start_time);
        $(parent + '.save').removeClass("disabled")
        $(parent + '.save').removeAttr("disabled")
      }
      else if(current_status == "finished") {
        $(parent + ".status").html("<strong>Tests complete</strong>.");
        $(parent + ".summary").html(example + " tests run (" + failed + " failed, " + pending + " pending).");
        $('#start-time').html("Tests started at " + start_time);
        $(parent + '.save').removeClass("disabled")
        $(parent + '.save').removeAttr("disabled")
      }
      else if(current_status == "not scheduled") {
        $(parent + ".status").html("No tests are currently scheduled for this agent.");
        $(parent + ".summary").html("");
      }
      else if(current_status == "scheduled") {
        $(parent + ".status").html("Waiting for tests to start.");
        $(parent + ".summary").html("");
      }
      else if(current_status == "no tests subfolder") {
        $(parent + ".status").html("No 'tests' subfolders found, skipping tests.");
        $(parent + ".summary").html("");
      }
    }

    (function updater() {
      var agent = agents[current_agent_index];
      $.ajax({
        url: '/update_test_status',
        data: {"index": max_index, "agent": agent},
        type: "GET",
        dataType: "json",
        success: function(data) {
          if(data.max_index != null) {
            max_index = data.max_index;
          }
          console.log("received: " + data)
          $('div#' + agent + " .results").append(data.html);
          update_progress_bars(data.passed_count, data.pending_count, data.failed_count, data.example_count, data.status);
          update_status_display(data.passed_count, data.pending_count, data.failed_count, data.example_count, data.status, data.start_time);
          if (data.status == "finished") {
            /* if tests are finished for this agent, we no longer need to update
               its status. We remove it from the list of agents and
               ask for updates immediately (for the next agent). */
            agents.splice( $.inArray(agent,agents), 1 );
            next_request = 101;
            max_index = 0;
          }
          else if (data.status == "not scheduled") {
            agents.splice( $.inArray(agent,agents), 1 );
            next_request = 102;
          }
          else if (data.status == "started") {
            next_request = 5000;
          }
          else if (data.status == "scheduled") {
            next_request = 103;
            current_agent_index++;
          }
          else if (data.status == "no tests subfolder") {
            agents.splice( $.inArray(agent,agents), 1 );
            next_request = 104;
          }
        },
        error: function(xhr, status, errorThrown) {
          console.error("Error: " + status + " (" + errorThrown + ") ---- " + xhr)
          $('#error_info').html("<div class='alert'> <strong>An unexpected error occured during the tests.</strong> More information: " + status + " (" + errorThrown + "). </br>" + xhr.responseText + "</div>");
        },
        complete: function() {
          // check if there are remaining agents
          if(agents.length == 0) {
            console.log("No more agent status need updating.");
            return 0;
          }
          // cycle through the agents that still need updates
          if(current_agent_index >= agents.length) {
            current_agent_index = 0;
          }
           console.log("Next request is scheduled in " + next_request + "ms, for agent " + agents[current_agent_index] + " with index " + max_index);
          setTimeout(updater, next_request);
        }
      });
    })();

  });
  </script>

</div>