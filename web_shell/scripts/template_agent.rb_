#!/usr/bin/ruby -w
require 'yaml'

require_relative '../../cloud_agents/XX_PROJECT_NAME/initial'

# XX_PROJECT_NAME agent
class Agent_XX_PROJECT_NAME

  include Initial_agent_XX_PROJECT_NAME


  # Project
  @AGENT_NAME = 'XX_PROJECT_NAME'
  @CHANNEL = 'com.mdi.services.XX_PROJECT_NAME'
  @root_dir = nil

  def initialize() # constructor
    @root_dir = 'XX_PROJECT_ROOT_PATH' # path of initial.rb
    # init root dir
    log_debug("Agent_XX_PROJECT_NAME root path is = \"#{@root_dir}\"")

    # Load dynamic channel
    cnf = YAML::load(File.open("#{@root_dir}/config/dynamic_channel.yml"))
    @CHANNEL = cnf['Channel_str']
    log_debug("Agent_XX_PROJECT_NAME init with dynamic channel = \"#{@CHANNEL}\"")
  end

  ######### Messages from devices ######################################
  def handle_message(meta, payload, account)
    return unless payload['channel'] == @CHANNEL
    if payload['type'] != 'message'
      log_error("handle_message: wrong type #{payload['type']} (not 'message')")
      return
    end

    new_message_from_device(meta, payload, account)
  end

  def handle_presence(meta, payload, account)
    if payload['type'] != 'connect' && payload['type'] != 'reconnect' && payload['type'] != 'disconnect'
      log_error("handle_presence: wrong type '#{payload['type']}' (not 'message')")
      return
    end
    log_debug('handle_presence')

    new_presence_from_device(meta, payload, account)
  end

  def handle_track(meta, payload, account)
    #todo: test type, log on errors
    new_track_from_device(meta, payload, account)
  end

  ########## Messages to devices #######################################
  def send_message_to_device(account, asset, content)
    account.messages.new({
      asset:     asset.imei,
      recipient: asset.imei,
      sender:    '@@server@@',
      channel:   @CHANNEL,
      payload:   content.to_json
      }, as: :agent).push
  end

  def reply_message_to_device(message, account, content)
    #idem, we build a Message then send it to rqueue
    m = message.reply("200#{content}")
    m.push('account' => account.name)
  end

  ############### Logger ###############################################
  def log_debug(str_msg)
    CC_SDK.logger.debug("Agent XX_PROJECT_NAME: #{str_msg}")
  end

  def log_info(str_msg)
    CC_SDK.logger.info("Agent XX_PROJECT_NAME: #{str_msg}")
  end

  def log_warn(str_msg)
    CC_SDK.logger.warn("Agent XX_PROJECT_NAME: #{str_msg}")
  end

  def log_error(str_msg)
    CC_SDK.logger.error("Agent XX_PROJECT_NAME: #{str_msg}")
  end

  ############### Redis ################################################
  def redis()
    @redis ||= Redis::Namespace.new('CCS:XX_PROJECT_NAME', :redis => CC_SDK.redis)
  end

  ######################################################################

  require_relative '../../cloud_agents/XX_PROJECT_NAME/initial'
end
